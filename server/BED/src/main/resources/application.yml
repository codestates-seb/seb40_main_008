spring:
#  profiles:
#    include: oauth
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/main008?serverTimezone=Asia/Seoul&createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8
#    username: root
#    password:
  h2:
    console:
      enabled: true
      path: /h2
  datasource:
    url: jdbc:h2:mem:test
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true;

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
#  배포 서버 설정
#  jpa:
#    hibernate:
#      ddl-auto: create  # (1) 스키마 자동 생성
#    show-sql: true      # (2) SQL 쿼리 출력
#    properties:
#      hibernate:
#        format_sql: true  # (3) SQL pretty print
#  sql:
#    init:
#      data-locations: classpath*:db/h2/data.sql

#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            clientId: 627758491877-e9de7kfqo64dd3g7ofaj86bjo4gei6ae.apps.googleusercontent.com
#            clientSecret: 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
#            redirect-uri: http://localhost:8080/login/oauth2/code/google
#            scope:
#              - email
#              - profile
#
#          naver:
#            client-id: 9gvOe6VSPDRJmKtRBryX
#            client-secret: els3rgxN80
#            scope:
#              - email
#              - profile_image
#            client-name: Naver
#            authorization-grant-type: authorization_code
#            redirect-uri:
#
#            provider:
#              naver:
#                authorization-uri: https://nid.naver.com/oauth2.0/authorize
#                token-uri: https://nid.naver.com/oauth2.0/token
#                user-info-uri: https://openapi.naver.com/v1/nid/me
#                user-name-attribute: response # 회원정보를 json으로 받는데 response라는 키값으로 네이버가 return해줌.(value에는 getAttributes()한 값들이 들어가있음)
#
#          kakao:
#            client-id: c1455db2f2763a85d3ed2c478f31e75d
#            client-secret: 1Sgl7vjuX7EzCdRyDrwvFvjggCBxfMPg
#            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
#            authorization-grant-type: authorization_code
#            client-authentication-method: POST
#            client-name: Kakao
#            scope:
#              - account_email
#              - profile_nickname
#              - profile_image
#            provider:
#              kakao:
#                authorization-uri: https://kauth.kakao.com/oauth/authorize
#                token-uri: https://kauth.kakao.com/oauth/token
#                user-info-uri: https://kapi.kakao.com/v2/user/me
#                user-name-attribute: id
logging:
  level:
    org:
      springframework:
        orm:
          jpa: DEBUG
server:
  servlet:
    encoding:
      force-response: true
  error:
    include-message: always
mail:
  address:
    admin: admin@gmail.com
jwt:
  key:
    secret: ${JWT_SECRET_KEY}               # 민감한 정보는 시스템 환경 변수에서 로드한다.
  access-token-expiration-minutes: 30
  refresh-token-expiration-minutes: 420
